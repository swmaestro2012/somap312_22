package com.softwaremaestro.Indoornavigation.Activity;

import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import kr.softwaremaestro.indoor.engine.Localization;
import kr.softwaremaestro.indoor.engine.WiFiRadioMap;
import kr.softwaremaestro.indoor.wrm.vo.Accesspoint;
import kr.softwaremaestro.indoor.wrm.vo.ApSet;
import kr.softwaremaestro.indoor.wrm.vo.Point;

import com.softwaremaestro.Indoornavigation.R;
import com.softwaremaestro.Indoornavigation.Util.DraggableImageView;
import com.softwaremaestro.Indoornavigation.Util.MyLocationOverlayView;
import com.softwaremaestro.Indoornavigation.Util.StaticValue;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.Toast;
import android.widget.ImageView.ScaleType;

public class MapActivity extends Activity {
	Intent intent;
	DraggableImageView DimageView;
	FrameLayout map_frame;
	Bitmap[] mapArray;
	boolean bSelectMyLocationOnMap;
	Button buttonShowMyLocation;
	Localization mLocalization;
	WiFiRadioMap mWrm;
	WifiManager wifimanager;
	List<ScanResult> mScanResult;
	MyLocationOverlayView mLocationOverlay;
	Handler imageHandler;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_map);

		bSelectMyLocationOnMap = false;

		DimageView = (DraggableImageView) findViewById(R.id.activity_map_draggableimageview);
		map_frame = (FrameLayout) findViewById(R.id.activity_map_framelayout);

		initMapBitmap();

		try {
			mWrm = WiFiRadioMap.getinstance(this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		mLocalization = new Localization(mWrm);
		wifimanager = (WifiManager) getSystemService(WIFI_SERVICE);
		if (wifimanager.isWifiEnabled() == false)
			wifimanager.setWifiEnabled(true);

		setImageHandler();
		Bitmap bit = Bitmap.createBitmap(1024, 1024, Bitmap.Config.ARGB_8888);
		mLocationOverlay = new MyLocationOverlayView(this);
		mLocationOverlay.setLayoutParams(DimageView.getLayoutParams());
		mLocationOverlay.setBackgroundColor(Color.TRANSPARENT);
		mLocationOverlay.setScaleType(ScaleType.MATRIX);
		mLocationOverlay.setImageBitmap(bit);
		map_frame.addView(mLocationOverlay);

		intent = getIntent();
		int calltype = intent.getIntExtra(StaticValue.KEY_CALL_TYPE, -1);
		if (calltype == StaticValue.TYPE_SELECT_DESTINATION) {
			int POIID = intent.getIntExtra(StaticValue.KEY_POI_ID, -1);
			DimageView.setImageBitmap(mapArray[(int) intent.getIntExtra(
					StaticValue.KEY_POI_Z, 1) - 1]);
			DimageView.setHandler(imageHandler);
			startActivityForResult(new Intent(MapActivity.this,
					SelectMyLocationType.class),
					StaticValue.REQUEST_MYLOCATIONTYPE);
		} else {
			DimageView.setImageBitmap(mapArray[1]);
			DimageView.setHandler(imageHandler);

		}
		buttonShowMyLocation = (Button) findViewById(R.id.activity_map_button_mylocation);
		buttonShowMyLocation.setOnClickListener(l);
		
		startWIFIScan();
	}

	public void setImageHandler() {
		imageHandler = new Handler() {
			@Override
			public void handleMessage(Message msg) {

				switch (msg.what) {
				case StaticValue.MSG_SYNC_IMAGEVIEW:
					Matrix m = DimageView.getImageMatrix();
					mLocationOverlay.setImageMatrix(m);
					mLocationOverlay.invalidate();
					DimageView.invalidate();
					break;
				case StaticValue.MSG_CLICK_VIEW:
					break;
				}
			}
		};
	}

	private void initMapBitmap() {
		mapArray = new Bitmap[2];
		BitmapFactory.Options option = new BitmapFactory.Options();
		option.inScaled = false;
		mapArray[0] = BitmapFactory.decodeResource(getResources(),
				R.drawable.map_1, option);
		mapArray[1] = BitmapFactory.decodeResource(getResources(),
				R.drawable.map_2, option);
	}

	OnClickListener l = new OnClickListener() {

		@Override
		public void onClick(View v) {
			if (v == buttonShowMyLocation) {
				Set<ApSet> fingerprint = new HashSet<ApSet>();
				List<Accesspoint> apList = mWrm.getAccesspoints();
				for (ScanResult scan : mScanResult) {
					Accesspoint findap = null;
					for (Accesspoint ap : apList) {
						if (ap.getBssid().equals(scan.BSSID)) {
							findap = ap;
							break;
						}
					}
					if (findap == null)
						continue;
					ApSet temp = new ApSet(null, findap.getId(), scan.level);
					Log.e("test",temp.toString());
					fingerprint.add(temp);
				}
				Point p = mLocalization.getPosition(fingerprint);
				if (p == null) {
					Toast.makeText(MapActivity.this, "mylocation null", Toast.LENGTH_SHORT).show();
				} else {
					mLocationOverlay.setMyLocation(p);
					mLocationOverlay.invalidate();
					Toast.makeText(MapActivity.this, p.toString(), Toast.LENGTH_SHORT).show();
				}
			}
		}
	};

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == StaticValue.REQUEST_MYLOCATIONTYPE) {
			if (resultCode == RESULT_OK) {
				int result = data.getIntExtra(StaticValue.KEY_MYLOCATION_TYPE,
						-1);
				if (result == StaticValue.TYPE_SELECT_MAP) {

				} else if (result == StaticValue.TYPE_SELECT_WIFI) {

				}
			}
		}
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		stopWIFIScan();
	}

	public void stopWIFIScan() {
		unregisterReceiver(mReceiver);
	}

	public void startWIFIScan() {
		// init WIFISCAN
		final IntentFilter filter = new IntentFilter(
				WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
		filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
		registerReceiver(mReceiver, filter);
		wifimanager.startScan();
	}

	private BroadcastReceiver mReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			final String action = intent.getAction();
			if (action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION)) {
				getScanResult();
				wifimanager.startScan(); // for refresh
			} else if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {
				sendBroadcast(new Intent("wifi.ON_NETWORK_STATE_CHANGED"));
			}
		}

		public void getScanResult() {
			mScanResult = wifimanager.getScanResults();
		}
	};

}
